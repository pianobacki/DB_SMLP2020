mutate(FB = fct_relevel(FB, "SilentCounting", "PointAtLastCountedPerson", "LoudCounting"))
labelA<-levels(d$FB)[1]
labelB<-levels(d$FB)[2]
labelC<-levels(d$FB)[3]
# Create effect coding for Factor AB and Factor (AC)
d <- d %>% mutate(FAB.e =case_when(                             #effect coding
FB==labelA ~ -0.5,
FB==labelB ~ +0.5,
FB==labelC  ~ 0)) %>%
mutate(FAC.e =case_when(                            #effect coding
FB==labelA ~ -0.5,
FB==labelB ~ 0,
FB==labelC  ~ +0.5))
# Create cosum contrasts
t(Xicost <- fractions(rbind(Hyp1=c(X1= -1/2, X2=+ 1/2, X3=0),
Hyp2=c(X1= -1/2, X2= 0, X3= +1/2))))
(Xcost <- ginv2(Xicost))
colnames(Xcost) <- c("FAB","FAC")
contrasts(d$FB) <- Xcost
d[, 14:16] <- mat_myC
names(d)[14:16] <- c("GM", "FAB", "FAC")
#add model matrix - mathematical
mat_myC <- model.matrix(~ FB, d)
d[, 17:19] <- mat_myC
names(d)[17:19] <- c("GM.m", "FAB.m", "FAC.m")
(Xcost <- ginv2(Xicost))
colnames(Xcost) <- c("FAB","FAC")
contrasts(d$FB) <- Xcost
#rounded values for some plotting reasons
mat_myC <- round(model.matrix(~ FB, d),digit=5)
d[, 14:16] <- mat_myC
names(d)[14:16] <- c("GM", "FAB", "FAC")
#add model matrix - mathematical
mat_myC <- model.matrix(~ FB, d)
d[, 17:19] <- mat_myC
names(d)[17:19] <- c("GM.m", "FAB.m", "FAC.m")
# Have a look
head(d)
summary(d)
glimpse(d)
plot(density(d$DV))
plot(density(d$DV_log))
plot(density(d$DV_reci))
boxcox(DV~ Img, data=d)
lmm.min <- lmer(DV ~ 1+ FB + (1|VP) + (1|Img), data=d, REML=FALSE)
lmm.min2 <- lmer(DV ~ 1+ FAB.m + FAC.m + (1|VP) + (1|Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))
anova(lmm.min,lmm.min2)
##warum geht doppel bar syntax hier nicht?
lmm.max <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m |VP) + (1+ FAB.m + FAC.m |Img), data=d, REML=FALSE)#nc
summary(lmm.max)
##warum geht doppel bar syntax hier nicht?
lmm.max <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)#nc
summary(lmm.max)
#remove correlations
lmm.1a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)
lmm.1b <- lmer(DV ~ 1+ FB + (1+ FB ||VP) + (1+ FB ||Img), data=d, REML=FALSE) #zerocorr geht hier nicht
lmm.2d <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
#Modelselection
lmm.2a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)#sf
#Modelselection
lmm.2a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)#sf
lmm.2b <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAC.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)#sf
lmm.2c <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAB.m ||Img), data=d, REML=FALSE)#sf
lmm.2d <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
summary(lmm.2d)
summary(rePCA(lmm.2d))
lmm.2e <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m ||VP) + (1+ FAB.m ||Img), data=d, REML=FALSE)#sf
lmm.2f <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
lmm.2f <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#nc
summary(lmm.2f)
anova(lmm.2d,lmm.2f)
##edit from here
lmm.3a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
lmm.3b <- lmer(DV ~ 1+ FAB.m + FAC.m + (0+ FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
anova(lmm.3a, lmm.3b)
lmm.4a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1 |Img), data=d, REML=FALSE)#con
lmm.4b <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAB.m +FAC.m ||Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))#sf
lmm.5a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAC.m |Img), data=d, REML=FALSE)#ncon
anova(lmm.3a, lmm.4a)
anova(lmm.min2, lmm.4a)
summary(rePCA(lmm.4a))
lmm.2a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1 |Img), data=d, REML=FALSE)#con
lmm.3a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
lmm.3b <- lmer(DV ~ 1+ FAB.m + FAC.m + (0+ FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
anova(lmm.3a, lmm.3b)
anova(lmm.2a,lmm.3a)
anova(lmm.2a,lmm.3b)
anova(lmm.4a,lmm.3a)
anova(lmm.4a,lmm.3b)
lmm.4b <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAB.m +FAC.m ||Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))#con
anova(lmm.4a, lmm.4b)
anova(lmm.4a,lmm.3a)
anova(lmm.4a,lmm.3b)
lmm<-lmm.4a
summary(lmm)
summary(rePCA(lmm))
print(summary(lmm), corr=FALSE)
View(d)
d <- d %>%
mutate(DV=DV_log)
labelDV<-sprintf("Log Fixation Duration")
lmm.min <- lmer(DV ~ 1+ FB + (1|VP) + (1|Img), data=d, REML=FALSE)
lmm.min2 <- lmer(DV ~ 1+ FAB.m + FAC.m + (1|VP) + (1|Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))
(anova(lmm.min,lmm.min2))
summary(lmm.min2)
#remove correlations
lmm.1a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)
lmm.1b <- lmer(DV ~ 1+ FB + (1+ FB ||VP) + (1+ FB ||Img), data=d, REML=FALSE) #zerocorr doesnt work
anova(lmm.1a,lmm.1b)
summary(lmm.1a)
summary(lmm.1b)
lmm.3a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
lmm.3b <- lmer(DV ~ 1+ FAB.m + FAC.m + (0+ FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
anova(lmm.3a, lmm.3b)
#try to reduce more
lmm.4a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1 |Img), data=d, REML=FALSE)#con
anova(lmm.4a,lmm.3a)#ns
anova(lmm.4a,lmm.3b)#ns
#with other optimizer a more complex model is possible
lmm.4b <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAB.m +FAC.m ||Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))#con
lmm<-lmm.4a
summary(lmm)
summary(rePCA(lmm))
print(summary(lmm), corr=FALSE)
summary(rePCA(lmm))
print(summary(lmm), corr=FALSE)
summary(rePCA(lmm))
m
m
simdat <- fortify.merMod(model=lmm, data = d)
p_lmm_res1 <- ggplot(simdat, aes(.fitted,.resid)) + geom_point(colour="blue", size=.3) +
facet_grid( ~ FAB.m+FAC.m) + geom_hline(yintercept=0) + theme_bw()
p_lmm_res2 <- ggplot(simdat, aes(.fitted, .resid)) +
geom_point(shape=I(".")) +
xlab("Fitted values") + ylab("Standardized residuals") + theme_bw() +
geom_hline(yintercept=0) + geom_density2d(size=1)  #+ geom_hex()
# Plot
grid.arrange(p_lmm_res1, p_lmm_res2, nrow=2)
# fixed effects
fixef(lmm)
# Wald
confint(lmm,parm=c("(Intercept)","FAB.m","FAC.m"),
method="Wald")
labels <- c("FAB", "FAC")
keep.terms <- names(fixef(lmm)[-1])
## Computing p-values via Wald-statistics approximation (treating t as Wald z).
tab_model(lmm, terms=keep.terms, pred.labels=labels,
show.se=TRUE, show.stat=TRUE, show.ci = FALSE, string.se = "SE",
show.re.var=FALSE, show.obs=TRUE,
emph.p = FALSE, dv.labels=labelDV , show.icc = FALSE)
summary(lmm)
plot_model(lmm, title = "Contrasts",
terms=keep.terms,
axis.labels = labels,
colors = "bw", show.values = TRUE, show.p = TRUE, value.offset = .1, value.size = 5,
dot.size = 3, line.size = 1, vline.color = "grey", width = 0) + theme_bw()
plot_model(lmm, title = "Contrasts",
terms=keep.terms,
axis.labels = labels,
colors = "bw", show.values = TRUE, show.p = TRUE, value.offset = .1, value.size = 5,
dot.size = 3, line.size = 1, vline.color = "grey", width = 0) + theme_bw()
```{r fig.height=12, fig.width=15}
# fixed effects
lmm.fix<-fixef(lmm)[-1]
# Wald
lmm.fixconf<-data.frame(M=fixef(lmm)[-1],
as.data.frame(confint(lmm,parm=c("(Intercept)","FAB.m","FAC.m"),method="Wald")[-1,]),
Contrast=c("FAB", "FAC"))
names(lmm.fixconf)<-c("M","min","max","Contrast")
p0<-ggplot(data=lmm.fixconf, aes(x=Contrast, y=M, ymin=min, ymax=max)) +
geom_point()+geom_errorbar(width=.1)+geom_hline(yintercept=0, color='red', size=1)+
scale_x_discrete(limits=lmm.fixconf$Contrast)+
xlab("Contrasts")+
ylab(labelDV)+
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Fixed Effects 95%-Confidence Intervals")
p0
d <- fortify.merMod(lmm)
d$pe_DV <- remef(lmm, ran="all") # remove all random effects
tab_lmmse <- d %>%
group_by(FB) %>% # Compute M + SE
summarize(N = n(), M = mean(pe_DV),
SD = sd(pe_DV), SE = SD/sqrt(N), CI=1.96*SE,
SD_res = sd(.resid), SE_res =SD_res/sqrt(N), CI_res=1.96*SE_res )
tab_lmmse
tab_real <- d %>%
group_by(FB) %>% # Compute M + SE
summarize(N = n(), M = mean(DV),
SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_real
d$DVfit<-fitted.values(lmm)
tab_model <- d %>%
group_by(FB) %>% # Compute M + SE
summarize(N = n(), M = mean(DVfit),
SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_model
tab_bsse <- d %>%
group_by(VP, FB) %>%
summarise(DV = mean(DV)) %>%
group_by(FB) %>%
summarise(N = n(), M = mean(DV), SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_bsse
tab_bise <- d %>%
group_by(Img, FB) %>%
summarise(DV = mean(DV)) %>%
group_by(FB) %>%
summarise(N = n(), M = mean(DV), SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_bise
d <- d %>%
group_by(VP) %>%
mutate(M_VP = mean(DV)) # compute subject means
d$DV_VP <- d$DV - d$M_VP + mean(d$M_VP)
k <- length(unique(d$FB)) # n cells of design
mf <- sqrt(k/(k-1))                # Morey factor
tab_wsse <- d %>%
group_by(VP, FB) %>%
summarise(DV = mean(DV_VP)) %>%
group_by(FB) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsse
d <- d %>%
group_by(Img) %>%
mutate(M_Img = mean(DV)) # compute item means
d$DV_Img <- d$DV - d$M_Img + mean(d$M_Img)
tab_wise <- d %>%
group_by(Img, FB) %>%
summarise(DV = mean(DV_Img)) %>%
group_by(FB) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wise
d$DV_VP_Img <- d$DV - d$M_Img - d$M_VP + mean(d$M_Img) + mean(d$M_VP)
tab_wsiseMF <- d %>%
group_by(VP, Img, FB) %>%
summarise(DV = mean(DV_VP_Img)) %>%
group_by(FB) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsiseMF
tab_wsise <- d %>%
group_by(VP, Img, FB) %>%
summarise(DV = mean(DV_VP_Img)) %>%
group_by(FB) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsise
# combine results into one data frame
tab <- rbind( #cbind(tab_bsse[ , c(1,3,6)], Effects = "Between-subject"),
#cbind(tab_bise[ , c(1,3,6)], Effects = "Between-image"),
#cbind(tab_wsse[ , c(1,3,6)], Effects = "Within-subject"),
#cbind(tab_wise[ , c(1,3,6)], Effects = "Within-item"),
#cbind(tab_wsiseMF[,c(1,3,6)],Effects = "Within-subject & -item: Morey factor"),
#cbind(tab_wsise[, c(1,3,6)], Effects = "Within-subject & -item"),
cbind(tab_lmmse[, c(1,3,6)], Effects = "LMM partial effect"),
cbind(tab_real[, c(1,3,6)], Effects =  "real means"),
cbind(tab_model[, c(1,3,6)], Effects =  "Model fit"))
tab
# create figure
tab$FactorL <- as.numeric(tab$FB) + as.numeric(tab$Effects)/20 - 0.01
p1 <- ggplot(data=tab, aes(x=FB, y=M, ymin=M-CI, ymax=M+CI,
group=Effects, colour=Effects)) +
#scale_color_manual(name="Conf intervals", values=c("darkblue","violet", "blue", "green", "black", "orange", "red","grey","darkgreen")) +
scale_color_manual(name="Conf intervals", values=c( "red","black","green")) +
geom_point() + geom_line() +
geom_errorbar(width=.1, aes(x=FactorL)) +
labs(x="Factor", y=labelDV) +
#coord_cartesian(ylim=c(300, 500)) +
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Comparison of Factor 95%-Confidence Intervals")
p1
p0<-ggplot(data=lmm.fixconf, aes(x=Contrast, y=M, ymin=min, ymax=max)) +
geom_point()+geom_errorbar(width=.1)+geom_hline(yintercept=0, color='red', size=1)+
scale_x_discrete(limits=lmm.fixconf$Contrast)+
xlab("Contrasts")+
ylab(labelDV)+
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Fixed Effects 95%-Confidence Intervals")
p0
source('~/.active-rstudio-document', echo=TRUE)
library (rstudioapi)
rm(list=ls())
setwd(dirname(getActiveDocumentContext()$path))
set.seed(123)
library(MASS)
library(lmerTest)
library(lme4)
library(lattice)
library(MASS)
library(sjmisc)
library(sjPlot)
library(tidyverse)
library(grid)
library(gridExtra)
library(GGally)
library(tidyverse)
source("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2019/LMM_Seminar/functions/mixedDesign.v0.6.3.R")
source("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2019/LMM_Seminar/functions/GenDatLMM.R")  # simulation functions
# devtools::install_github("hohenstein/remef")
library(remef)
source("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2019/LMM_Seminar/functions/dotplot.RK.R")
ginv2 <- function(x) # define a function to make the output nicer
MASS::fractions(provideDimnames(MASS::ginv(x),base=dimnames(x)[2:1]))
theme_set(theme_bw(base_size=18))
library (rstudioapi)
rm(list=ls())
setwd(dirname(getActiveDocumentContext()$path))
set.seed(123)
library(MASS)
library(lmerTest)
library(lme4)
library(lattice)
library(sjmisc)
library(sjPlot)
library(grid)
library(gridExtra)
library(GGally)
library(tidyverse)
source("../functions/mixedDesign.v0.6.3.R")
source("../functions/GenDatLMM.R")  # simulation functions
# devtools::install_github("hohenstein/remef")
library(remef)
source("../functions/dotplot.RK.R")
ginv2 <- function(x) # define a function to make the output nicer
MASS::fractions(provideDimnames(MASS::ginv(x),base=dimnames(x)[2:1]))
theme_set(theme_bw(base_size=18))
#load data
Filename<-"../data/DataImageFix.rda"
load(Filename)#Data.Image.Fix
d<-Data.Image.Fix
#add noise
noise<-rnorm(length(d$DV), mean = 0, sd = 1/120*1000)
d <- d %>%
mutate(noise=noise) %>%
mutate(DV=abs(DV+noise))
#define conditions
d<-d %>%
mutate(FB= case_when(
cond==1 ~ "SilentCounting",
cond==2 ~ "PointAtLastCountedPerson",
cond==3 ~ "LoudCounting"
)) %>%
mutate(FB=as.factor(FB),VP=as.factor(VP),Img=as.factor(Img),DV_log=log(DV), DV_reci= 1/DV) %>%
mutate(FB = fct_relevel(FB, "SilentCounting", "PointAtLastCountedPerson", "LoudCounting"))
labelA<-levels(d$FB)[1]
labelB<-levels(d$FB)[2]
labelC<-levels(d$FB)[3]
# Create effect coding for Factor (AB) and Factor (AC)
d <- d %>% mutate(FAB.e =case_when(                             #effect coding
FB==labelA ~ -0.5,
FB==labelB ~ +0.5,
FB==labelC  ~ 0)) %>%
mutate(FAC.e =case_when(                            #effect coding
FB==labelA ~ -0.5,
FB==labelB ~ 0,
FB==labelC  ~ +0.5))
# Create cosum contrasts
t(Xicost <- fractions(rbind(Hyp1=c(X1= -1/2, X2=+ 1/2, X3=0),
Hyp2=c(X1= -1/2, X2= 0, X3= +1/2))))
(Xcost <- ginv2(Xicost))
colnames(Xcost) <- c("FAB","FAC")
contrasts(d$FB) <- Xcost
#rounded values for some plotting reasons
mat_myC <- round(model.matrix(~ FB, d),digit=5)
d[, 14:16] <- mat_myC
names(d)[14:16] <- c("GM", "FAB", "FAC")
#add model matrix - mathematical
mat_myC <- model.matrix(~ FB, d)
d[, 17:19] <- mat_myC
names(d)[17:19] <- c("GM.m", "FAB.m", "FAC.m")
# Have a look
head(d)
summary(d)
glimpse(d)
plot(density(d$DV))
plot(density(d$DV_log))
plot(density(d$DV_reci))
boxcox(DV~ Img, data=d)
d <- d %>%
mutate(DV=DV_log)
labelDV<-sprintf("Log Fixation Duration")
lmm.min <- lmer(DV ~ 1+ FB + (1|VP) + (1|Img), data=d, REML=FALSE)
lmm.min2 <- lmer(DV ~ 1+ FAB.m + FAC.m + (1|VP) + (1|Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))
(anova(lmm.min,lmm.min2))
summary(lmm.min2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library (rstudioapi)
rm(list=ls())
setwd(dirname(getActiveDocumentContext()$path))
set.seed(123)
library(MASS)
library(lmerTest)
library(lme4)
library(lattice)
library(sjmisc)
library(sjPlot)
library(grid)
library(gridExtra)
library(GGally)
library(tidyverse)
source("../functions/mixedDesign.v0.6.3.R")
source("../functions/GenDatLMM.R")  # simulation functions
# devtools::install_github("hohenstein/remef")
library(remef)
source("../functions/dotplot.RK.R")
ginv2 <- function(x) # define a function to make the output nicer
MASS::fractions(provideDimnames(MASS::ginv(x),base=dimnames(x)[2:1]))
theme_set(theme_bw(base_size=18))
# Chunk 2
#Filename<-"../data/DataImage.rda"
#load(Filename)#Data.Image
#
#Data.Image.Fix<-Data.Image %>%
#  filter(MBody==4, Fix==1, eventchange==1, sample>=1, nthfix!=1,revnthfix!=1, #is.na(filterout)) %>%
#  #filter(nthfix>1 & nthfix < 6) %>%
#  select(VP,trial,Img,cond,fd) %>%
#  mutate(DV=fd, DV_org=DV) %>%
#  mutate(cond=as.factor(cond))
#
#Outfile<-sprintf('../data/DataImageFix.rda')
#save(Data.Image.Fix,file=Outfile)
#load data
Filename<-"../data/DataImageFix.rda"
load(Filename)#Data.Image.Fix
d<-Data.Image.Fix
#add noise
noise<-rnorm(length(d$DV), mean = 0, sd = 1/120*1000)
d <- d %>%
mutate(noise=noise) %>%
mutate(DV=abs(DV+noise))
#define conditions
d<-d %>%
mutate(FB= case_when(
cond==1 ~ "SilentCounting",
cond==2 ~ "PointAtLastCountedPerson",
cond==3 ~ "LoudCounting"
)) %>%
mutate(FB=as.factor(FB),VP=as.factor(VP),Img=as.factor(Img),DV_log=log(DV), DV_reci= 1/DV) %>%
mutate(FB = fct_relevel(FB, "SilentCounting", "PointAtLastCountedPerson", "LoudCounting"))
labelA<-levels(d$FB)[1]
labelB<-levels(d$FB)[2]
labelC<-levels(d$FB)[3]
# Create effect coding for Factor (AB) and Factor (AC)
d <- d %>% mutate(FAB.e =case_when(                             #effect coding
FB==labelA ~ -0.5,
FB==labelB ~ +0.5,
FB==labelC  ~ 0)) %>%
mutate(FAC.e =case_when(                            #effect coding
FB==labelA ~ -0.5,
FB==labelB ~ 0,
FB==labelC  ~ +0.5))
#presaved contrast
#contrasts(d$FB) <- contr.treatment(3)
# Create cosum contrasts
t(Xicost <- fractions(rbind(Hyp1=c(X1= -1/2, X2=+ 1/2, X3=0),
Hyp2=c(X1= -1/2, X2= 0, X3= +1/2))))
(Xcost <- ginv2(Xicost))
colnames(Xcost) <- c("FAB","FAC")
contrasts(d$FB) <- Xcost
#rounded values for some plotting reasons
mat_myC <- round(model.matrix(~ FB, d),digit=5)
d[, 14:16] <- mat_myC
names(d)[14:16] <- c("GM", "FAB", "FAC")
#add model matrix - mathematical
mat_myC <- model.matrix(~ FB, d)
d[, 17:19] <- mat_myC
names(d)[17:19] <- c("GM.m", "FAB.m", "FAC.m")
# Have a look
head(d)
summary(d)
glimpse(d)
# Chunk 3
plot(density(d$DV))
plot(density(d$DV_log))
plot(density(d$DV_reci))
boxcox(DV~ Img, data=d)
# Chunk 4
d <- d %>%
mutate(DV=DV_log)
labelDV<-sprintf("Log Fixation Duration")
# Chunk 5
lmm.min <- lmer(DV ~ 1+ FB + (1|VP) + (1|Img), data=d, REML=FALSE)
lmm.min2 <- lmer(DV ~ 1+ FAB.m + FAC.m + (1|VP) + (1|Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))
(anova(lmm.min,lmm.min2))
summary(lmm.min2)
# Chunk 6
#remove correlations
lmm.1a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1+ FAB.m + FAC.m ||VP) + (1+ FAB.m + FAC.m ||Img), data=d, REML=FALSE)
lmm.1b <- lmer(DV ~ 1+ FB + (1+ FB ||VP) + (1+ FB ||Img), data=d, REML=FALSE) #zerocorr doesnt work
anova(lmm.1a,lmm.1b)
summary(lmm.1a)
summary(lmm.1b)
lmm.3a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
lmm.3b <- lmer(DV ~ 1+ FAB.m + FAC.m + (0+ FAC.m ||VP) + (1+ FAC.m ||Img), data=d, REML=FALSE)#con
anova(lmm.3a, lmm.3b)
#try to reduce more
lmm.4a <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1 |Img), data=d, REML=FALSE)#con
anova(lmm.4a,lmm.3a)#ns
anova(lmm.4a,lmm.3b)#ns
#with other optimizer a more complex model is possible
lmm.4b <- lmer(DV ~ 1+ FAB.m + FAC.m + (1 |VP) + (1+ FAB.m +FAC.m ||Img), data=d, REML=FALSE, control = lmerControl(calc.derivs = FALSE, optimizer = "bobyqa", optCtrl = list(maxfun = 1e6)))#con
lmm<-lmm.4a
summary(lmm)
summary(rePCA(lmm))
print(summary(lmm), corr=FALSE)
