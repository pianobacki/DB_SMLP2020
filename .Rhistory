rmMRA_coef_subj <- d %>%
split(.$VP) %>%
map(~ lm(DV ~ 1+FT+FB+FT:FB, .)) %>%
map_dfr( ~ as.data.frame(t(as.matrix(coef(.)))))
names(rmMRA_coef_subj) <- c("Intercept", "GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
# Fixed effects (w/ tidyverse)
tab_Est_SE_subj <- rmMRA_coef_subj %>%
rownames_to_column("VP") %>%
gather(key = "Coeff", value = "value", -VP, factor_key = TRUE) %>%
group_by(Coeff) %>%
summarise(Est = mean(value), SE = sd(value), t = Est/SE)
tab_Est_SE_subj
# Correlations between GM and effects (CPs)
ggscatmat(rmMRA_coef_subj, columns = 1:4, alpha = 1/3) +
theme_bw(base_size=18)
simdat_subj <- d %>%
group_by(VP, FT, FB) %>%
summarise(N = n(), DV_subj = mean(DV), SD_subj=sd(DV)) %>%
ungroup()
simdat_subj %>%
dplyr::select(VP, FT,FB, DV_subj) %>%
mutate(Factor=paste(FT, FB, sep = "_")) %>%
dplyr::select(VP, Factor, DV_subj) %>%
spread(Factor,DV_subj) %>%
ggscatmat(columns = 2:5, alpha = 1/3) +
#coord_cartesian(xlim=c(250, 550), ylim=c(250, 550)) +
theme_bw(base_size=18)
simdat_subj <-simdat_subj %>%
mutate(Factor=paste(FT, FB, sep = "_"))
subj_aov <- aov(DV_subj ~  Factor + Error(VP/Factor), data=simdat_subj)
coefficients(subj_aov, contrasts=list(MASS::contr.sdif))
# Fit rmMRA
rmMRA_coef_Img <- d %>%
split(.$Img) %>%
map(~ lm(DV ~ 1+FT+FB+FT:FB, .)) %>%
map_dfr( ~ as.data.frame(t(as.matrix(coef(.)))))
names(rmMRA_coef_Img) <- c("Intercept", "GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
# Fixed effects (w/ tidyverse)
tab_Est_SE_Img <- rmMRA_coef_Img %>%
rownames_to_column("Img") %>%
gather(key = "Coeff", value = "value", -Img, factor_key = TRUE) %>%
group_by(Coeff) %>%
summarise(Est = mean(value), SE = sd(value), t = Est/SE)
tab_Est_SE_Img
# Fit rmMRA
rmMRA_coef_Img <- d %>%
split(.$Img) %>%
map(~ lm(DV ~ 1+ FT+FB+FT:FB, .)) %>%
map_dfr( ~ as.data.frame(t(as.matrix(coef(.)))))
names(rmMRA_coef_Img) <- c("Intercept", "GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
ggscatmat(rmMRA_coef_Img, columns = 1:4, alpha = 1/3) + theme_bw(base_size=18)
# Correlations between measures (r's) - again, note the fundamental difference!
simdat_Img <- d %>%
group_by(Img, FT, FB) %>%
summarise(N = n(), DV_Img = mean(DV), SD_Img=sd(DV)) %>%
ungroup()
simdat_Img %>%
dplyr::select(Img, FT, FB, DV_Img) %>%
mutate(Factor=paste(FT, FB, sep = "_")) %>%
dplyr::select(Img, Factor, DV_Img) %>%
spread(Factor, DV_Img) %>%
ggscatmat(columns = 2:5, alpha = 1/3) +
#coord_cartesian(xlim=c(250, 550), ylim=c(250, 550)) +
theme_bw(base_size=18)
simdat_Img <-simdat_Img %>%
mutate(Factor=paste(FT, FB, sep = "_"))
Img_aov <- aov(DV_Img ~  Factor + Error(Img/Factor), data=simdat_Img)
coefficients(Img_aov, contrasts=list(MASS::contr.sdif))
# fixed effects
fixef(lmm)
# Wald
confint(lmm,parm=c("(Intercept)","n.FT","n.FB","n.FAB"),
method="Wald")
labels <- c("GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
keep.terms <- names(fixef(lmm)[-1])
## Computing p-values via Wald-statistics approximation (treating t as Wald z).
tab_model(lmm, terms=keep.terms, pred.labels=labels,
show.se=TRUE, show.stat=TRUE, show.ci = FALSE, string.se = "SE",
show.re.var=FALSE, show.obs=TRUE,
emph.p = FALSE, dv.labels=labelDV , show.icc = FALSE)
summary(lmm)
plot_model(lmm, title = "Contrasts",
terms=keep.terms,
axis.labels = labels,
colors = "bw", show.values = TRUE, show.p = TRUE, value.offset = .1, value.size = 5,
dot.size = 3, line.size = 1, vline.color = "grey", width = 0) + theme_bw()
# fixed effects
lmm.fix<-fixef(lmm)[-1]
# Wald
lmm.fixconf<-data.frame(M=fixef(lmm)[-1],
as.data.frame(confint(lmm,parm=c("(Intercept)","n.FT","n.FB","n.FAB"),method="Wald")[-1,]),
Contrast=c("GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB"))
names(lmm.fixconf)<-c("M","min","max","Contrast")
p0<-ggplot(data=lmm.fixconf, aes(x=Contrast, y=M, ymin=min, ymax=max)) +
geom_point()+geom_errorbar(width=.1)+geom_hline(yintercept=0, color='red', size=1)+
scale_x_discrete(limits=lmm.fixconf$Contrast)+
xlab("Contrasts")+
ylab(labelDV)+
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Fixed Effects 95%-Confidence Intervals")
p0
d <- fortify.merMod(lmm)
d$pe_DV <- remef(lmm, ran="all") # remove all random effects
tab_lmmse <- d %>%
group_by(Factor) %>% # Compute M + SE
summarize(N = n(), M = mean(pe_DV),
SD = sd(pe_DV), SE = SD/sqrt(N), CI=1.96*SE,
SD_res = sd(.resid), SE_res =SD_res/sqrt(N), CI_res=1.96*SE_res )
tab_lmmse
tab_real <- d %>%
group_by(Factor) %>% # Compute M + SE
summarize(N = n(), M = mean(DV),
SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_real
d$DVfit<-fitted.values(lmm)
tab_model <- d %>%
group_by(Factor) %>% # Compute M + SE
summarize(N = n(), M = mean(DVfit),
SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_model
tab_bsse <- d %>%
group_by(VP, Factor) %>%
summarise(DV = mean(DV)) %>%
group_by(Factor) %>%
summarise(N = n(), M = mean(DV), SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_bsse
tab_bise <- d %>%
group_by(Img, Factor) %>%
summarise(DV = mean(DV)) %>%
group_by(Factor) %>%
summarise(N = n(), M = mean(DV), SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_bise
d <- d %>%
group_by(VP) %>%
mutate(M_VP = mean(DV)) # compute subject means
d$DV_VP <- d$DV - d$M_VP + mean(d$M_VP)
k <- length(unique(d$Factor)) # n cells of design
mf <- sqrt(k/(k-1))                # Morey factor
tab_wsse <- d %>%
group_by(VP, Factor) %>%
summarise(DV = mean(DV_VP)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsse
d <- d %>%
group_by(Img) %>%
mutate(M_Img = mean(DV)) # compute item means
d$DV_Img <- d$DV - d$M_Img + mean(d$M_Img)
tab_wise <- d %>%
group_by(Img, Factor) %>%
summarise(DV = mean(DV_Img)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wise
d$DV_VP_Img <- d$DV - d$M_Img - d$M_VP + mean(d$M_Img) + mean(d$M_VP)
tab_wsiseMF <- d %>%
group_by(VP, Img, Factor) %>%
summarise(DV = mean(DV_VP_Img)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsiseMF
tab_wsise <- d %>%
group_by(VP, Img, Factor) %>%
summarise(DV = mean(DV_VP_Img)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsise
# combine results into one data frame
tab <- rbind( #cbind(tab_bsse[ , c(1,3,6)], Effects = "Between-subject"),
#cbind(tab_bise[ , c(1,3,6)], Effects = "Between-image"),
#cbind(tab_wsse[ , c(1,3,6)], Effects = "Within-subject"),
#cbind(tab_wise[ , c(1,3,6)], Effects = "Within-item"),
#cbind(tab_wsiseMF[,c(1,3,6)],Effects = "Within-subject & -item: Morey factor"),
#cbind(tab_wsise[, c(1,3,6)], Effects = "Within-subject & -item"),
cbind(tab_lmmse[, c(1,3,6)], Effects = "LMM partial effect"),
cbind(tab_real[, c(1,3,6)], Effects =  "real means"),
cbind(tab_model[, c(1,3,6)], Effects =  "Model fit"))
tab
# create figure
tab$FactorL <- as.numeric(tab$Factor) + as.numeric(tab$Effects)/20 - 0.01
p1 <- ggplot(data=tab, aes(x=Factor, y=M, ymin=M-CI, ymax=M+CI,
group=Effects, colour=Effects)) +
#scale_color_manual(name="Conf intervals", values=c("darkblue","violet", "blue", "green", "black", "orange", "red","grey","darkgreen")) +
scale_color_manual(name="Conf intervals", values=c( "red","black","green")) +
geom_point() + geom_line() +
geom_errorbar(width=.1, aes(x=FactorL)) +
labs(x="Factor", y=labelDV) +
#coord_cartesian(ylim=c(300, 500)) +
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Comparison of Factor 95%-Confidence Intervals")
p1
# Plot
grid.arrange(p_lmm_res1, p_lmm_res2, nrow=2)
# Fit rmMRA
rmMRA_coef_subj <- d %>%
split(.$VP) %>%
map(~ lm(DV ~ 1+FT+FB+FT:FB, .)) %>%
map_dfr( ~ as.data.frame(t(as.matrix(coef(.)))))
names(rmMRA_coef_subj) <- c("Intercept", "GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
# Fixed effects (w/ tidyverse)
tab_Est_SE_subj <- rmMRA_coef_subj %>%
rownames_to_column("VP") %>%
gather(key = "Coeff", value = "value", -VP, factor_key = TRUE) %>%
group_by(Coeff) %>%
summarise(Est = mean(value), SE = sd(value), t = Est/SE)
tab_Est_SE_subj
# Correlations between GM and effects (CPs)
ggscatmat(rmMRA_coef_subj, columns = 1:4, alpha = 1/3) +
theme_bw(base_size=18)
simdat_subj <- d %>%
group_by(VP, FT, FB) %>%
summarise(N = n(), DV_subj = mean(DV), SD_subj=sd(DV)) %>%
ungroup()
simdat_subj %>%
dplyr::select(VP, FT,FB, DV_subj) %>%
mutate(Factor=paste(FT, FB, sep = "_")) %>%
dplyr::select(VP, Factor, DV_subj) %>%
spread(Factor,DV_subj) %>%
ggscatmat(columns = 2:5, alpha = 1/3) +
#coord_cartesian(xlim=c(250, 550), ylim=c(250, 550)) +
theme_bw(base_size=18)
# Fit rmMRA
rmMRA_coef_Img <- d %>%
split(.$Img) %>%
map(~ lm(DV ~ 1+FT+FB+FT:FB, .)) %>%
map_dfr( ~ as.data.frame(t(as.matrix(coef(.)))))
names(rmMRA_coef_Img) <- c("Intercept", "GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
# Fixed effects (w/ tidyverse)
tab_Est_SE_Img <- rmMRA_coef_Img %>%
rownames_to_column("Img") %>%
gather(key = "Coeff", value = "value", -Img, factor_key = TRUE) %>%
group_by(Coeff) %>%
summarise(Est = mean(value), SE = sd(value), t = Est/SE)
tab_Est_SE_Img
# Fit rmMRA
rmMRA_coef_Img <- d %>%
split(.$Img) %>%
map(~ lm(DV ~ 1+ FT+FB+FT:FB, .)) %>%
map_dfr( ~ as.data.frame(t(as.matrix(coef(.)))))
names(rmMRA_coef_Img) <- c("Intercept", "GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
ggscatmat(rmMRA_coef_Img, columns = 1:4, alpha = 1/3) + theme_bw(base_size=18)
# Correlations between measures (r's)
simdat_Img <- d %>%
group_by(Img, FT, FB) %>%
summarise(N = n(), DV_Img = mean(DV), SD_Img=sd(DV)) %>%
ungroup()
# Correlations between measures (r's)
simdat_Img <- d %>%
group_by(Img, FT, FB) %>%
summarise(N = n(), DV_Img = mean(DV), SD_Img=sd(DV)) %>%
ungroup()
simdat_Img %>%
dplyr::select(Img, FT, FB, DV_Img) %>%
mutate(Factor=paste(FT, FB, sep = "_")) %>%
dplyr::select(Img, Factor, DV_Img) %>%
spread(Factor, DV_Img) %>%
ggscatmat(columns = 2:5, alpha = 1/3) +
#coord_cartesian(xlim=c(250, 550), ylim=c(250, 550)) +
theme_bw(base_size=18)
simdat_Img <-simdat_Img %>%
mutate(Factor=paste(FT, FB, sep = "_"))
Img_aov <- aov(DV_Img ~  Factor + Error(Img/Factor), data=simdat_Img)
coefficients(Img_aov, contrasts=list(MASS::contr.sdif))
# profiling
p_lmm <- profile(lmm, which="beta_")
confint(p_lmm)
# bootstrap
confint(lmm, parm=c("(Intercept)", "Factor2-1", "Factor3-2", "Factor4-3"),
method="boot")
fixef(lmm)
# bootstrap
confint(lmm, parm=c("(Intercept)", "n.FT", "n.FB", "n.FAB"),
method="boot")
labels <- c("GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB")
keep.terms <- names(fixef(lmm)[-1])
## Computing p-values via Wald-statistics approximation (treating t as Wald z).
tab_model(lmm, terms=keep.terms, pred.labels=labels,
show.se=TRUE, show.stat=TRUE, show.ci = FALSE, string.se = "SE",
show.re.var=FALSE, show.obs=TRUE,
emph.p = FALSE, dv.labels=labelDV , show.icc = FALSE)
summary(lmm)
keep.terms <- names(fixef(lmm)[-1])
## Computing p-values via Wald-statistics approximation (treating t as Wald z).
tab_model(lmm, terms=keep.terms, pred.labels=labels,
show.se=TRUE, show.stat=TRUE, show.ci = FALSE, string.se = "SE",
show.re.var=FALSE, show.obs=TRUE,
emph.p = FALSE, dv.labels=labelDV , show.icc = FALSE)
summary(lmm)
plot_model(lmm, title = "Contrasts",
terms=keep.terms,
axis.labels = labels,
colors = "bw", show.values = TRUE, show.p = TRUE, value.offset = .1, value.size = 5,
dot.size = 3, line.size = 1, vline.color = "grey", width = 0) + theme_bw()
# Wald
lmm.fixconf<-data.frame(M=fixef(lmm)[-1],
as.data.frame(confint(lmm,parm=c("(Intercept)","n.FT","n.FB","n.FAB"),method="Wald")[-1,]),
Contrast=c("GuessTime-FreeViewing", "Standing-SittingChinrest", "InteractionFT:FB"))
names(lmm.fixconf)<-c("M","min","max","Contrast")
p0<-ggplot(data=lmm.fixconf, aes(x=Contrast, y=M, ymin=min, ymax=max)) +
geom_point()+geom_errorbar(width=.1)+geom_hline(yintercept=0, color='red', size=1)+
scale_x_discrete(limits=lmm.fixconf$Contrast)+
xlab("Contrasts")+
ylab(labelDV)+
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Fixed Effects 95%-Confidence Intervals")
p0
ggpredict(lmm, terms=c("n.FT"))
d <- fortify.merMod(lmm)
d$pe_DV <- remef(lmm, ran="all") # remove all random effects
tab_lmmse <- d %>%
group_by(Factor) %>% # Compute M + SE
summarize(N = n(), M = mean(pe_DV),
SD = sd(pe_DV), SE = SD/sqrt(N), CI=1.96*SE,
SD_res = sd(.resid), SE_res =SD_res/sqrt(N), CI_res=1.96*SE_res )
tab_lmmse
tab_real <- d %>%
group_by(Factor) %>% # Compute M + SE
summarize(N = n(), M = mean(DV),
SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_real
d$DVfit<-fitted.values(lmm)
tab_model <- d %>%
group_by(Factor) %>% # Compute M + SE
summarize(N = n(), M = mean(DVfit),
SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_model
tab_bsse <- d %>%
group_by(VP, Factor) %>%
summarise(DV = mean(DV)) %>%
group_by(Factor) %>%
summarise(N = n(), M = mean(DV), SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_bsse
We compute **invalid** standard errors (SEs). Note that they are **invalid** because the computation assumes that all observations are independent. We know they are not because Factor is a within-subject and a within-item factor.  (Of course, between-item standard errors computed this way would also be invalid.)
```{r}
tab_bise <- d %>%
group_by(Img, Factor) %>%
summarise(DV = mean(DV)) %>%
group_by(Factor) %>%
summarise(N = n(), M = mean(DV), SD = sd(DV), SE = SD/sqrt(N), CI=1.96*SE)
tab_bise
d <- d %>%
group_by(VP) %>%
mutate(M_VP = mean(DV)) # compute subject means
d$DV_VP <- d$DV - d$M_VP + mean(d$M_VP)
k <- length(unique(d$Factor)) # n cells of design
mf <- sqrt(k/(k-1))                # Morey factor
tab_wsse <- d %>%
group_by(VP, Factor) %>%
summarise(DV = mean(DV_VP)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsse
We can also compute standard errors relative to each item's mean, that is a within-item standard error. Again, also with application of the correction factor (Morey, 2008).
d <- d %>%
group_by(Img) %>%
mutate(M_Img = mean(DV)) # compute item means
d$DV_Img <- d$DV - d$M_Img + mean(d$M_Img)
tab_wise <- d %>%
group_by(Img, Factor) %>%
summarise(DV = mean(DV_Img)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wise
d$DV_VP_Img <- d$DV - d$M_Img - d$M_VP + mean(d$M_Img) + mean(d$M_VP)
tab_wsiseMF <- d %>%
group_by(VP, Img, Factor) %>%
summarise(DV = mean(DV_VP_Img)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = mf*sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsiseMF
tab_wsise <- d %>%
group_by(VP, Img, Factor) %>%
summarise(DV = mean(DV_VP_Img)) %>%
group_by(Factor) %>%
summarize(N = n(), M = mean(DV), SD = sd(DV),
SE = sd(DV)/sqrt(N), CI=1.96*SE)
tab_wsise
# combine results into one data frame
tab <- rbind( #cbind(tab_bsse[ , c(1,3,6)], Effects = "Between-subject"),
#cbind(tab_bise[ , c(1,3,6)], Effects = "Between-image"),
#cbind(tab_wsse[ , c(1,3,6)], Effects = "Within-subject"),
#cbind(tab_wise[ , c(1,3,6)], Effects = "Within-item"),
#cbind(tab_wsiseMF[,c(1,3,6)],Effects = "Within-subject & -item: Morey factor"),
#cbind(tab_wsise[, c(1,3,6)], Effects = "Within-subject & -item"),
cbind(tab_lmmse[, c(1,3,6)], Effects = "LMM partial effect"),
cbind(tab_real[, c(1,3,6)], Effects =  "real means"),
cbind(tab_model[, c(1,3,6)], Effects =  "Model fit"))
tab
# create figure
tab$FactorL <- as.numeric(tab$Factor) + as.numeric(tab$Effects)/20 - 0.01
p1 <- ggplot(data=tab, aes(x=Factor, y=M, ymin=M-CI, ymax=M+CI,
group=Effects, colour=Effects)) +
#scale_color_manual(name="Conf intervals", values=c("darkblue","violet", "blue", "green", "black", "orange", "red","grey","darkgreen")) +
scale_color_manual(name="Conf intervals", values=c( "red","black","green")) +
geom_point() + geom_line() +
geom_errorbar(width=.1, aes(x=FactorL)) +
labs(x="Factor", y=labelDV) +
#coord_cartesian(ylim=c(300, 500)) +
theme_bw(base_size=18) +
theme(legend.justification=c(1,0), legend.position=c(1,0),
legend.background=element_rect(fill="white", color="black")) +
ggtitle("Comparison of Factor 95%-Confidence Intervals")
p1
getwd()
View(Data.Image.Fix)
names(Data.Image.Fix)
table(Data.Image.Fix$cond)
table(Data.Image.Fix$Cond)
table(Data.Image.Fix$quest)
head(table(Data.Image.Fix$SacAmpl))
head(table(Data.Image.Fix$SacAmpl))
table(Data.Image.Fix$SacAmpl)
table(Data.Image.Fix$body)
View(tab_wsise)
rm(list=ls())
setwd("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020/")
set.seed(123)
setwd("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020/")
setwd("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020_Backhaus/")
set.seed(123)
library(MASS)
library(lmerTest)
library(lme4)
library(lattice)
library(MASS)
library(sjmisc)
library(sjPlot)
library(tidyverse)
library(grid)
library(gridExtra)
library(GGally)
library(tidyverse)
source("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2019/LMM_Seminar/functions/mixedDesign.v0.6.3.R")
source("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2019/LMM_Seminar/functions/GenDatLMM.R")  # simulation functions
# devtools::install_github("hohenstein/remef")
library(remef)
source("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2019/LMM_Seminar/functions/dotplot.RK.R")
ginv2 <- function(x) # define a function to make the output nicer
MASS::fractions(provideDimnames(MASS::ginv(x),base=dimnames(x)[2:1]))
theme_set(theme_bw(base_size=18))
Filename<-"/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020/DataImageFix.rda"
load(Filename)#Data.Image.Fix
Filename<-"/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020_Backhaus/DataImageFix.rda"
load(Filename)#Data.Image.Fix
Filename<-"/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020_Backhaus/DataImageFix.rda"
load(Filename)#Data.Image.Fix
Filename<-"/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020_Backhaus/SMLP2020/DataImageFix.rda"
load(Filename)#Data.Image.Fix
setwd("/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020_Backhaus/SMLP2020/")
Filename<-"/Users/Daniel/CloudStation/Arbeit/03_Allgemeine Psychologie/2020/Git_SMLP2020_Backhaus/SMLP2020/DataImageFix.rda"
Filename<-"./DataImageFix.rda"
load(Filename)#Data.Image.Fix
Filename<-"./DataImageSac.rda"
load(Filename)#Data.Image.Sac
table(Data.Image.Sac$SacAmpl)
max(Data.Image.Sac$SacAmpl)
max(Data.Image.Fix$SacfdAmpl)
max(Data.Image.Fix$fd)
tail(Data.Image.Fix$fd)
d<-Data.Image.Fix %>%
filter(MBody==2, Fix==1, eventchange==1, sample>=1, sample<=240, nthfix!=1,revnthfix!=1, is.na(filterout)) %>%
#filter(nthfix>1 & nthfix < 6) %>%
select(VP,trial,Img,cond,fd, nthpres) %>%
mutate(DV=fd, DV_org=DV) %>%
mutate(cond=as.factor(cond), nthpres=as.factor(nthpres))
noise<-rnorm(length(d$DV), mean = 0, sd = 1/120*1000)
d <- d %>%
mutate(noise=noise) %>%
mutate(DV=abs(DV+noise))
d<-d %>%
mutate(FT= case_when(
cond==1 | cond ==2 ~ "FreeViewing",
cond==3 | cond ==4 ~ "GuessTime"
)) %>%
mutate(FB= case_when(
cond==1 | cond ==3 ~ "SittingChinrest",
cond==2 | cond ==4 ~ "Standing"
)) %>%
mutate(Factor= case_when(
cond==1  ~ "FreeViewing_SittingChinrest",
cond==2  ~ "FreeViewing_Standing",
cond==3  ~ "GuessTime_SittingChinrest",
cond==4  ~ "GuessTime_Standing"
)) %>%
mutate(FT=as.factor(FT), FB=as.factor(FB), Factor=as.factor(Factor),VP=as.factor(VP),Img=as.factor(Img),DV_log=log(DV), DV_reci= 1/DV)
d <- d %>%
mutate(FT.e = if_else(FT == "FreeViewing", -.5, +.5),  # effect code
FT.t = FT.e + .5) %>%                 # treatment contrast
mutate(FB.e = if_else(FB == "SittingChinrest", -.5, +.5),  # effect code
FB.t = FB.e + .5)                # treatment contrast
contrasts(d$FT) <- contr.sdif(2)
contrasts(d$FB) <- contr.sdif(2)
mat_myC <- model.matrix(~ FT*FB, d)
d[, 19:22] <- mat_myC
names(d)[19:22] <- c("GM", "n.FT", "n.FB", "n.FAB")
# Have a look
head(d)
summary(d)
glimpse(d)
